{"ast":null,"code":"var _jsxFileName = \"D:\\\\Next Js Project\\\\spacex-project\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport ApolloClient from 'apollo-boost';\nimport { gql } from \"apollo-boost\";\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\nconst client = new ApolloClient({\n  uri: 'https://api.spacex.land/graphql/'\n});\nclient.query({\n  query: gql`\n      {\n        rocket(country: \"USA\") {\n          country\n        }\n      }\n    `\n}).then(result => console.log(result));\nconst rocket = gql`\n  {\n    rocket(country: \"USA\") {\n      country\n      type\n    }\n  }\n`;\n\nconst App = () => __jsx(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}, __jsx(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35\n  },\n  __self: this\n}, __jsx(\"h2\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36\n  },\n  __self: this\n}, \"My first Apollo app \\uD83D\\uDE80\")));\n\nfunction ExchangeRates() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(EXCHANGE_RATES);\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Error :(\");\n  return data.rates.map(({\n    currency,\n    rate\n  }) => __jsx(\"div\", {\n    key: currency,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, currency, \": \", rate)));\n}\n\nrender(__jsx(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["D:/Next Js Project/spacex-project/pages/index.js"],"names":["ApolloClient","gql","React","render","ApolloProvider","client","uri","query","then","result","console","log","rocket","App","ExchangeRates","loading","error","data","useQuery","EXCHANGE_RATES","rates","map","currency","rate","document","getElementById"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,cAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AAGA,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf;AAIAD,MAAM,CACHE,KADH,CACS;AACLA,EAAAA,KAAK,EAAEN,GAAI;;;;;;;AADN,CADT,EAUGO,IAVH,CAUQC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAVlB;AAYE,MAAMG,MAAM,GAAGX,GAAI;;;;;;;CAAnB;;AASA,MAAMY,GAAG,GAAG,MACV,MAAC,cAAD;AAAgB,EAAA,MAAM,EAAER,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADF,CADF,CADF;;AAQA,SAASS,aAAT,GAAyB;AACvB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BC,QAAQ,CAACC,cAAD,CAAzC;AAEA,MAAIJ,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,SAAOC,IAAI,CAACG,KAAL,CAAWC,GAAX,CAAe,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,KACpB;AAAK,IAAA,GAAG,EAAED,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,QADH,QACeC,IADf,CADF,CADK,CAAP;AAOD;;AAEDpB,MAAM,CAAC,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAD,EAAUqB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAV,CAAN","sourcesContent":["import ApolloClient from 'apollo-boost';\r\nimport { gql } from \"apollo-boost\";\r\nimport React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\n\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'https://api.spacex.land/graphql/',\r\n});\r\n\r\nclient\r\n  .query({\r\n    query: gql`\r\n      {\r\n        rocket(country: \"USA\") {\r\n          country\r\n        }\r\n      }\r\n    `\r\n  })\r\n  .then(result => console.log(result));\r\n\r\n  const rocket = gql`\r\n  {\r\n    rocket(country: \"USA\") {\r\n      country\r\n      type\r\n    }\r\n  }\r\n`;\r\n\r\n  const App = () => (\r\n    <ApolloProvider client={client}>\r\n      <div>\r\n        <h2>My first Apollo app ðŸš€</h2>\r\n      </div>\r\n    </ApolloProvider>\r\n  );\r\n\r\n  function ExchangeRates() {\r\n    const { loading, error, data } = useQuery(EXCHANGE_RATES);\r\n  \r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error :(</p>;\r\n  \r\n    return data.rates.map(({ currency, rate }) => (\r\n      <div key={currency}>\r\n        <p>\r\n          {currency}: {rate}\r\n        </p>\r\n      </div>\r\n    ));\r\n  }\r\n  \r\n  render(<App />, document.getElementById('root'));"]},"metadata":{},"sourceType":"module"}